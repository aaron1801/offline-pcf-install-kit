---
download_stemcell_config: &download_stemcell_config
  config:
    platform: linux
    image_resource:
      type: docker-image
      source: {repository: czero/cflinuxfs2}
    inputs:
    - name: pivnet-product
    outputs:
    - name: stemcells
    params:
      IAAS: {{iaas_type}}
      PIVNET_API_TOKEN: {{pivnet_token}}
    run:
      path: bash
      args:
      - -c
      - |
        STEMCELL_VERSION=$(
          cat ./pivnet-product/metadata.json |
          jq --raw-output \
            '
            [
              .Dependencies[]
              | select(.Release.Product.Name | contains("Stemcells"))
              | .Release.Version
            ]
            | map(split(".") | map(tonumber))
            | transpose | transpose
            | max // empty
            | map(tostring)
            | join(".")
            '
        )

        if [ -n "$STEMCELL_VERSION" ]; then
          echo "Downloading stemcell $STEMCELL_VERSION"

          product_slug=$(
            jq --raw-output \
              '
              if any(.Dependencies[]; select(.Release.Product.Name | contains("Stemcells for PCF (Windows)"))) then
                "stemcells-windows-server"
              else
                "stemcells"
              end
              ' < pivnet-product/metadata.json
          )
          
          mkdir stemcells
          cd stemcells
          pivnet-cli login --api-token="$PIVNET_API_TOKEN"
          pivnet-cli download-product-files -p "$product_slug" -r $STEMCELL_VERSION -g "*${IAAS}*" --accept-eula

          SC_FILE_PATH=`find ./ -name *.tgz`
          echo $SC_FILE_PATH

          if [ ! -f "$SC_FILE_PATH" ]; then
            echo "Stemcell file not found!"
            exit 1
          fi
        fi

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: curl
  type: docker-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest

resources:

# Tools

- name: mc-source
  type: github-release
  source:
    owner: minio
    repository: mc
- name: mc-linux-amd64
  type: curl
  source:
    url: https://dl.minio.io/client/mc/release/linux-amd64/mc
    filename: mc
- name: mc-linux-amd64-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: tools
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: mc-linux-amd64-(.*)

- name: bosh-cli-linux-amd64
  type: s3
  source:
    bucket: bosh-cli-artifacts
    endpoint: https://s3.amazonaws.com/
    regexp: bosh-cli-(.*)-linux-amd64
- name: bosh-cli-linux-amd64-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: tools
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: bosh-cli-(.*)-linux-amd64

- name: cf-cli-linux-amd64
  type: s3
  source:
    bucket: cf-cli-releases
    endpoint: https://s3-us-west-1.amazonaws.com
    regexp: releases/v(.*)/cf-cli_.*_linux_x86-64.tgz
- name: cf-cli-linux-amd64-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: tools
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: cf-cli_(.*)_linux_x86-64.tgz

- name: concourse-pipeline-steamroller
  type: github-release
  source:
    owner: krishicks
    repository: concourse-pipeline-steamroller
- name: concourse-pipeline-steamroller-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: tools
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: steamroll-(.*).tgz

# Pivotal Products

- name: stemcells-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: stemcells
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: bosh-stemcell-(.*)-vsphere-esxi-ubuntu-trusty-go_agent.tgz

- name: p-mysql-v1
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-mysql
    product_version: {{mysql_v1_version_regex}}
    sort_by: semver
- name: p-mysql-v1-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: p-mysql-(.*).pivotal

- name: p-mysql-v2
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: pivotal-mysql
    product_version: {{mysql_v2_version_regex}}
    sort_by: semver
- name: p-mysql-v2-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: pivotal-mysql-(.*).pivotal

- name: p-sso
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: pivotal_single_sign-on_service
    product_version: {{sso_version_regex}}
    sort_by: semver
- name: p-sso-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: Pivotal_Single_Sign-On_Service_(.*).pivotal

- name: pcf-metrics
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: apm
    product_version: {{pcf_metrics_version_regex}}
    sort_by: semver
- name: pcf-metrics-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: apm-(.*).pivotal

- name: p-redis
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-redis
    product_version: {{redis_version_regex}}
    sort_by: semver
- name: p-redis-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: p-redis-(.*).pivotal
    
- name: p-cloudcache
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-cloudcache
    product_version: {{cloud_cache_version_regex}}
    sort_by: semver
- name: p-cloudcache-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: p-cloudcache-(.*).pivotal

# Bosh add-ons

- name: clamav
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-clamav-addon
    product_version: {{clamav_version_regex}}
    sort_by: semver
- name: clamav-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: clamav-(.*).tgz

- name: fim
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-fim-addon
    product_version: {{fim_version_regex}}
    sort_by: semver
- name: fim-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: fim-(.*).tgz

- name: ipsec
  type: pivnet
  source:
    api_token: {{pivnet_token}}
    product_slug: p-ipsec-addon
    product_version: {{ipsec_version_regex}}
    sort_by: semver
- name: ipsec-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: ipsec-(.*).tgz

- name: os-conf
  type: bosh-io-release
  source:
    repository: cloudfoundry/os-conf-release
- name: os-conf-out
  type: s3
  source:
    access_key_id: {{s3_access_key_id}}
    secret_access_key: {{s3_secret_access_key}}
    bucket: products
    endpoint: {{s3_endpoint}}
    region_name: {{s3_region}}
    regexp: os-conf-release-v(.*).tgz

jobs:
- name: tile-collector
  plan:
  - aggregate:
    - get: mc-linux-amd64
    - get: p-mysql-v1
    - get: p-mysql-v2
    - get: p-sso
    - get: p-cloudcache
    - get: pcf-metrics
    - get: p-redis
  - task: create-buckets
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      inputs:
      - name: mc-linux-amd64
      params:
        S3_ENDPOINT: {{s3_endpoint}}
        S3_ACCESS_KEY_ID: {{s3_access_key_id}}
        S3_SECRET_ACCESS_KEY: {{s3_secret_access_key}}
      run:
        path: bash
        args:
        - -c
        - |
          chmod +x mc/mc
          mc-linux-amd64/mc config host add minio $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY
          mc-linux-amd64/mc mb minio/products || true
          mc-linux-amd64/mc mb minio/stemcells || true

- name: save-mysql-v1
  plan:
  - get: pivnet-product
    resource: p-mysql-v1
    trigger: true
    passed: [tile-collector]
  - task: download-stemcell
    <<: *download_stemcell_config
  - put: stemcells-out
    params:
      file: stemcells/*.tgz
  - put: p-mysql-v1-out
    params:
      file: pivnet-product/*.pivotal
- name: save-mysql-v2
  plan:
  - get: pivnet-product
    resource: p-mysql-v2
    trigger: true
    passed: [tile-collector]
  - task: download-stemcell
    <<: *download_stemcell_config
  - put: stemcells-out
    params:
      file: stemcells/*.tgz
  - put: p-mysql-v2-out
    params:
      file: pivnet-product/*.pivotal
- name: save-sso
  plan:
  - get: pivnet-product
    resource: p-sso
    trigger: true
    passed: [tile-collector]
  - task: download-stemcell
    <<: *download_stemcell_config
  - put: stemcells-out
    params:
      file: stemcells/*.tgz
  - put: p-sso-out
    params:
      file: pivnet-product/*.pivotal
- name: save-cloudcache
  plan:
  - get: pivnet-product
    resource: p-cloudcache
    trigger: true
    passed: [tile-collector]
  - task: download-stemcell
    <<: *download_stemcell_config
  - put: stemcells-out
    params:
      file: stemcells/*.tgz
  - put: p-cloudcache-out
    params:
      file: pivnet-product/*.pivotal
- name: download-pcf-metrics
  plan:
  - get: pivnet-product
    resource: pcf-metrics
    trigger: true
    passed: [tile-collector]
  - task: download-stemcell
    <<: *download_stemcell_config
  - put: stemcells-out
    params:
      file: stemcells/*.tgz
  - put: pcf-metrics-out
    params:
      file: pivnet-product/*.pivotal
- name: download-redis
  plan:
  - get: pivnet-product
    resource: p-redis
    trigger: true
    passed: [tile-collector]
  - task: download-stemcell
    <<: *download_stemcell_config
  - put: stemcells-out
    params:
      file: stemcells/*.tgz
  - put: p-redis-out
    params:
      file: pivnet-product/*.pivotal

- name: addon-collector
  plan:
  - aggregate:
    - get: mc-linux-amd64
    - get: clamav
    - get: fim
    - get: ipsec
    - get: os-conf
  - task: create-buckets
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      inputs:
      - name: mc-linux-amd64
      params:
        S3_ENDPOINT: {{s3_endpoint}}
        S3_ACCESS_KEY_ID: {{s3_access_key_id}}
        S3_SECRET_ACCESS_KEY: {{s3_secret_access_key}}
      run:
        path: bash
        args:
        - -c
        - |
          chmod +x mc/mc
          mc-linux-amd64/mc config host add minio $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY
          mc-linux-amd64/mc mb minio/products || true
- name: download-clamav
  plan:
  - get: clamav
    trigger: true
    passed: [addon-collector]
  - put: clamav-out
    params:
      file: clamav/*.tgz
- name: download-fim
  plan:
  - get: fim
    trigger: true
    passed: [addon-collector]
  - put: fim-out
    params:
      file: fim/*.tgz
- name: download-ipsec
  plan:
  - get: ipsec
    trigger: true
    passed: [addon-collector]
  - put: ipsec-out
    params:
      file: ipsec/*.tgz
- name: download-os-conf
  plan:
  - get: os-conf
    trigger: true
    passed: [addon-collector]
  - task: rename-release
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      inputs:
      - name: os-conf
      outputs:
      - name: os-conf-out
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          VERSION=v$(cat os-conf/version)
          mv os-conf/release.tgz os-conf-out/os-conf-release-$VERSION.tgz
  - put: os-conf-out
    params:
      file: os-conf-out/*.tgz
      
- name: tool-collector
  plan:
  - aggregate:
    - get: mc-linux-amd64
    - get: mc-source
    - get: bosh-cli-linux-amd64
    - get: cf-cli-linux-amd64
    - get: concourse-pipeline-steamroller
  - task: create-buckets
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      inputs:
      - name: mc-linux-amd64
      params:
        S3_ENDPOINT: {{s3_endpoint}}
        S3_ACCESS_KEY_ID: {{s3_access_key_id}}
        S3_SECRET_ACCESS_KEY: {{s3_secret_access_key}}
      run:
        path: bash
        args:
        - -c
        - |
          chmod +x mc/mc
          mc-linux-amd64/mc config host add minio $S3_ENDPOINT $S3_ACCESS_KEY_ID $S3_SECRET_ACCESS_KEY
          mc-linux-amd64/mc mb minio/tools || true
  - task: prepare-releases
    config:
      platform: linux
      image_resource:
        type: docker-image
        source: {repository: czero/cflinuxfs2}
      inputs:
      - name: mc-linux-amd64
      - name: mc-source
      - name: concourse-pipeline-steamroller
      outputs:
      - name: mc-linux-amd64-out
      - name: concourse-pipeline-steamroller-out
      run:
        path: bash
        args:
        - -c
        - |
          set -ex
          MC_VERSION=v$(cat mc-source/version)
          mv mc-linux-amd64/mc mc-linux-amd64-out/mc-linux-amd64-$MC_VERSION
          
          STEAMROLL_VERSION=$(cat concourse-pipeline-steamroller/version)
          tar -czvf concourse-pipeline-steamroller-out/steamroll-$STEAMROLL_VERSION.tgz -C concourse-pipeline-steamroller .
  - put: mc-linux-amd64-out
    params:
      file: mc-linux-amd64-out/mc-linux-amd64-*
  - put: bosh-cli-linux-amd64-out
    params:
      file: bosh-cli-linux-amd64/bosh-cli-*
  - put: cf-cli-linux-amd64-out
    params:
      file: cf-cli-linux-amd64/*.tgz
  - put: concourse-pipeline-steamroller-out
    params:
      file: concourse-pipeline-steamroller-out/steamroll-*.tgz
